<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://fatboy2020.github.io</id>
    <title>学习过程</title>
    <updated>2020-03-15T14:44:06.045Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://fatboy2020.github.io"/>
    <link rel="self" href="https://fatboy2020.github.io/atom.xml"/>
    <subtitle>希望自己能坚持</subtitle>
    <logo>https://fatboy2020.github.io/images/avatar.png</logo>
    <icon>https://fatboy2020.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 学习过程</rights>
    <entry>
        <title type="html"><![CDATA[宝塔面板+v2ray+ws+tls+cdn]]></title>
        <id>https://fatboy2020.github.io/post/bao-ta-mian-ban-v2raywstlscdn/</id>
        <link href="https://fatboy2020.github.io/post/bao-ta-mian-ban-v2raywstlscdn/">
        </link>
        <updated>2020-03-15T10:03:56.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="简介">简介</h2>
<p>宝塔面板是一个小白建站神器，但是它的作用远远不止建站，写一下怎么用宝塔面板使用v2ray的websocket再套CDN。<br>
宝塔面板的安装直接再网上搜索就可以了，很简单这里就不赘述了。我们直接进入正题</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="简介">简介</h2>
<p>宝塔面板是一个小白建站神器，但是它的作用远远不止建站，写一下怎么用宝塔面板使用v2ray的websocket再套CDN。<br>
宝塔面板的安装直接再网上搜索就可以了，很简单这里就不赘述了。我们直接进入正题</p>
<!-- more -->
<h2 id="安装v2ray">安装v2ray</h2>
<p>这里使用v2ray的官方脚本:</p>
<p><code>V2ray官方脚本 bash &lt;(curl -L -s https://install.direct/go.sh)</code><br>
安装完成后会显示端口和uuid  记住它们。<br>
然后在宝塔面板的安全里放开该端口如果是阿里云之类的还要在安全组里面放开。</p>
<h2 id="新建一个网站并配置">新建一个网站并配置</h2>
<p>打开宝塔面板的控制网页再网站菜单下新建一个网站<br>
<img src="https://fatboy2020.github.io/post-images/1584267472665.png" alt="" loading="lazy"><br>
这里不用新建FTP以及数据库，绑定的域名需要提前解析到vps的IP 不然后面申请SSL证书不好申请，或者你的域名之前已经有证书了直接粘贴就可以了，接下来打开点击你新建的网站域名会打开配置界面再打开SSL选项申请证书选择Let's encrypt 获取证书。<br>
<img src="https://fatboy2020.github.io/post-images/1584267733284.png" alt="" loading="lazy"><br>
自己有证书在其他证书那里粘贴自己的证书。<br>
接着打开配置文件拉到ssl end 那里 把这个粘贴到那里保存。<br>
<img src="https://fatboy2020.github.io/post-images/1584267843671.png" alt="" loading="lazy"></p>
<pre><code class="language-c">          location /cc   //自己选择一个路径不改也没事记得后面v2ray那里修改（记得删除该注释）
             {
        proxy_pass http://127.0.0.1:你的端口号; //刚才记的端口号（还是删除）
        proxy_redirect off;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection &quot;upgrade&quot;;
        proxy_set_header Host $http_host;
        proxy_read_timeout 300s;
    
      }
</code></pre>
<h2 id="配置v2ray">配置v2ray</h2>
<p>进入v2ray的配置路径 <code>cd /etc/v2ray</code> 打开 config.json<br>
把里面所有内容删除之后粘贴一下内容：</p>
<pre><code class="language-c">{
  &quot;policy&quot;: {
    &quot;levels&quot;: {
      &quot;0&quot;: {
        &quot;uplinkOnly&quot;: 0,
        &quot;downlinkOnly&quot;: 0,
        &quot;connIdle&quot;: 150,
        &quot;handshake&quot;: 4
      }
    }
  },
  &quot;inbound&quot;: {
    &quot;listen&quot;: &quot;127.0.0.1&quot;,
    &quot;port&quot;: 31914,    //这里填写你的 v2ray 端口号，复制脚本请产出这句注释
    &quot;protocol&quot;: &quot;vmess&quot;,
    &quot;settings&quot;: {
      &quot;clients&quot;: [
        {
          &quot;id&quot;: &quot;xxxxxxxxxx&quot;,    //这里填写你的 v2ray UUID，复制脚本请删除这句注释
          &quot;level&quot;: 1,
          &quot;alterId&quot;: 32
        }
      ]
    },
    &quot;streamSettings&quot;: {
      &quot;network&quot;: &quot;ws&quot;,
      &quot;security&quot;: &quot;auto&quot;,
      &quot;wsSettings&quot;: {
        &quot;path&quot;: &quot;/cc&quot;,   //这里填是你自己 ws 的 path,如果修改配置文件的时候没有修改过就不管，复制脚本请删除这句注释
        &quot;headers&quot;: {
          &quot;Host&quot;: &quot;www.xxx.com&quot;  //这里填写你的域名，复制脚本请删除这句注释
        }
      }
    }
  },
  &quot;outbound&quot;: {
    &quot;protocol&quot;: &quot;freedom&quot;,
    &quot;settings&quot;: { }
  },
  &quot;outboundDetour&quot;: [
    {
      &quot;protocol&quot;: &quot;blackhole&quot;,
      &quot;settings&quot;: { },
      &quot;tag&quot;: &quot;blocked&quot;
    }
  ],
  &quot;routing&quot;: {
    &quot;strategy&quot;: &quot;rules&quot;,
    &quot;settings&quot;: {
      &quot;rules&quot;: [
        {
          &quot;type&quot;: &quot;field&quot;,
          &quot;ip&quot;: [
            &quot;0.0.0.0/8&quot;,
            &quot;10.0.0.0/8&quot;,
            &quot;100.64.0.0/10&quot;,
            &quot;127.0.0.0/8&quot;,
            &quot;169.254.0.0/16&quot;,
            &quot;172.16.0.0/12&quot;,
            &quot;192.0.0.0/24&quot;,
            &quot;192.0.2.0/24&quot;,
            &quot;192.168.0.0/16&quot;,
            &quot;198.18.0.0/15&quot;,
            &quot;198.51.100.0/24&quot;,
            &quot;203.0.113.0/24&quot;,
            &quot;::1/128&quot;,
            &quot;fc00::/7&quot;,
            &quot;fe80::/10&quot;
          ],
          &quot;outboundTag&quot;: &quot;blocked&quot;
        }
      ]
    }
  }
}
</code></pre>
<p>启动v2ray：<code>systemctl start v2ray</code></p>
<h2 id="配置cdn">配置CDN</h2>
<p>用cloudfare partener来配置<br>
打开官网:  <a href="https://cdn.moeelf.com/">萌精灵</a><br>
在这之前要申请一个cloudfare账号 <a href="https://cloudfare.com">官网</a><br>
选择添加域名 ：<br>
<img src="https://fatboy2020.github.io/post-images/1584282202393.png" alt="" loading="lazy"><br>
添加完之后选择管理DNS,打开后添加记录就是你要使用的域名可以用二级域名。添加时记得选择勾上那个黄色云朵，这是开启DNS 云朵变灰是关闭。由于是国外的dns所以速度会比较慢，建议在敏感时期开启就可以。<br>
之后到你的域名服务商那里添加一个CNAME记录。这个记录就是你添加完记录之后自动会给出的一个，长这样     <img src="https://fatboy2020.github.io/post-images/1584282583159.png" alt="" loading="lazy"><br>
然后进入这个网站<a href="https://www.cloudflare.com/zh-cn/ips/">https://www.cloudflare.com/zh-cn/ips/</a><br>
选择比较好的节点添加A记录 记录值就是你选择的IP.<br>
这样就可以使用了</p>
<h2 id="客户端配置">客户端配置</h2>
<figure data-type="image" tabindex="1"><img src="https://fatboy2020.github.io/post-images/1584283409781.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[github简单使用教程]]></title>
        <id>https://fatboy2020.github.io/post/github-jian-dan-shi-yong-jiao-cheng/</id>
        <link href="https://fatboy2020.github.io/post/github-jian-dan-shi-yong-jiao-cheng/">
        </link>
        <updated>2020-03-14T14:20:58.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="首先建立一个密钥并将密钥上传到github">首先建立一个密钥并将密钥上传到github</h2>
]]></summary>
        <content type="html"><![CDATA[<h2 id="首先建立一个密钥并将密钥上传到github">首先建立一个密钥并将密钥上传到github</h2>
<!-- more -->
<p><code>ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot;</code><br>
这里的youremmail是GitHub注册地址，接下去一直回车默认设置就可以，然会打开<code>.ssh</code>这个文件夹里面有刚刚生成的密钥打开<code>id_rsa.pub</code>这个文件将里面的内容复制到github账户中的<code>ssh key</code>中<br>
为了验证是否成功，在git bash下输入：<br>
<code>$ ssh -T git@github.com</code><br>
如果是第一次的会提示是否continue，输入yes就会看到：You've successfully authenticated, but GitHub does not provide shell access 。这就表示已成功连上github。<br>
##配置账户<br>
$ git config --global user.name &quot;your name&quot;<br>
$ git config --global user.email &quot;your_email@youremail.com&quot;<br>
然后用<code>git init &lt;folder&gt;</code>来新建一个git仓库。<br>
进入要上传的仓库，右键git bash，添加远程地址：</p>
<pre><code>$ git remote add origin git@github.com:yourName/yourRepo.git  
</code></pre>
<p>检出仓库<br>
执行如下命令以创建一个本地仓库的克隆版本：</p>
<p><code>git clone /path/to/repository</code><br>
如果是远端服务器上的仓库，你的命令会是这个样子：</p>
<p><code>git clone username@host:/path/to/repository</code><br>
工作流<br>
你的本地仓库由 git 维护的三棵&quot;树&quot;组成。第一个是你的 工作目录，它持有实际文件；第二个是 暂存区（Index），它像个缓存区域，临时保存你的改动；最后是 HEAD，它指向你最后一次提交的结果。</p>
<p>你可以提出更改（把它们添加到暂存区），使用如下命令：<br>
<code>git add &lt;filename&gt;</code><br>
<code>git add *</code><br>
这是 git 基本工作流程的第一步；使用如下命令以实际提交改动：<br>
<code>git commit -m &quot;代码提交信息&quot;</code><br>
现在，你的改动已经提交到了 HEAD，但是还没到你的远端仓库。<br>
##推送改动<br>
你的改动现在已经在本地仓库的 HEAD 中了。执行如下命令以将这些改动提交到远端仓库：<br>
<code>git push origin master</code><br>
可以把 master 换成你想要推送的任何分支。</p>
<p>如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：<br>
git remote add origin <server><br>
如此你就能够将你的改动推送到所添加的服务器上去了。</p>
<h2 id="简单的命令总结">简单的命令总结</h2>
<p><code>git init</code> 新建一个空的仓库</p>
<p><code>git status</code> 查看状态git add . 添加文件</p>
<p><code>git commit -m</code>'注释' 提交添加的文件并备注说明</p>
<p><code>git remote add origin xxx</code> 连接远程仓库</p>
<p><code>git push -u origin maste</code>r 将本地仓库文件推送到远程仓库</p>
<p><code>git log</code> 查看变更日志</p>
<p><code>git reset --hard</code> 版本号前六位 回归到指定版本</p>
<p><code>git branch</code> 查看分支</p>
<p><code>git branch newname</code> 创建一个叫newname的分支</p>
<p><code>git checkout newname</code> 切换到叫newname的分支上</p>
<p><code>git merge newname</code> 把newname分支合并到当前分支上</p>
<p><code>git pull origin master</code> 将master分支上的内容拉到本地上</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://fatboy2020.github.io/post/hello-gridea/</id>
        <link href="https://fatboy2020.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>